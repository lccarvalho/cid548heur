/* [nd32] - Dado um grafo orientado G e dois vértices, um fonte(s) e um destino(t), calcular o fluxo viável de  */
/* s para t que minimize o fluxo total */

/* conjunto de vertices */
set V;

/* conjunto de arestas - subconjunto do produto cartesiano (cross) dos elementos de V */
set A, within V cross V;

/* capacidade da aresta (i,j) */
param c{(i,j) in A};

/* custo de utilizaçao da aresta (i,j) */
param p{(i,j) in A};

/* vertice fonte */
param s;

/* vertice destino */
param t;

/* demanda em t */
param R;

/* variável indica a quantidade de fluxo que passa em uma aresta */
var flow{(i,j) in A}, integer, >= 0;

/* variável indica se fluxo passa ou não em uma aresta */
var x{(i,j) in A}, binary;

/* impede que o fluxo em uma aresta estoure sua capacidade, e garante que se passar fluxo nessa aresta */
/* então seu x será igual a 1 */
s.t. capacidade{(i,j) in A}:flow[i,j] <= c[i,j]*x[i,j];

/* constraint que garante a conservação de fluxo */
s.t. inout{v in V: v != s and v != t}: sum{i in V: (i,v) in A}flow[i,v] = sum{j in V: (v,j) in A}flow[v,j];

/* constraint que garante que seja atendida a demanada em t */
s.t. demanda:sum{i in V: i != t and (i,t) in A}flow[i,t] = R;

/* minimiza o custo referente a arestas usadas */
minimize objetivo:sum{(i,j) in A}x[i,j]*p[i,j];

solve;

printf "%d", objetivo > "nd32.out";
