/* [nd32] - Dado um grafo orientado G e dois vértices, um fonte(s) e um destino(t), calcular o fluxo viável de  */
/* s para t que minimize o fluxo total */

/* Conjunto de vertices */
set V;

/* Conjunto de arestas - produto cartesiano do conjunto de vertices */
set A, within V cross V;

/* Capacidade da aresta (i,j) */
param c{(i,j) in A};

/* Custo de utilizaçao da aresta (i,j) */
param p{(i,j) in A};

/* Vertice fonte */
param s;

/* Vertice destino */
param t;

/* Demanda em t */
param R;


var flow{(i,j) in A}, integer, >= 0;

s.t. capacidade{(i,j) in A}:flow[i,j] <= c[i,j];

s.t. inout{v in V: v != s and v != t}: sum{i in V: (i,v) in A}flow[i,v] = sum{j in V: (v,j) in A}flow[v,j];

s.t. demanda:sum{i in V: i != t and (i,t) in A}flow[i,t] >= R;

minimize objetivo:sum{(i,j) in A}flow[i,j]*p[i,j];

solve;

printf "%d", objetivo > "nd32.out";
